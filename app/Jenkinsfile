#!groovy

pipeline {
    agent any

    environment {
        REVISION = buildRevisionForBranch("app/")
    }

    options {
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }

    stages {
        stage("Prepare") {
            steps {
                script {
                    echo "${REVISION}"
                }
            }
        }

        stage("Build") {
            steps {
                script {

                }
            }
        }

        stage("Deploy") {
            steps {
                script {

                }
            }
        }
    }
}

def SNAPSHOT_SUFFIX = "-SNAPSHOT"
def RC_SUFFIX = "-RC${BUILD_NUMBER}"

def replaceCharacterForRevision(String branch = "") {
    return branch.replace("/", "-")
                 .replace("_", "-")
}

def buildRevisionForBranch(String pomLocation = "./") {
    def branch = "${env.GIT_BRANCH}".trim().toLowerCase()
    if ("develop" == branch) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision'] + SNAPSHOT_SUFFIX
    } else if (branch.startsWith("feature/")) {
        return replaceCharacterForRevision(branch).toUpperCase()
    } else if (branch.startsWith("PR-")) {
        return replaceCharacterForRevision(branch).toUpperCase()
    } else if (branch.startsWith("release/") || branch.startsWith("hotfix/")) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision'] + RC_SUFFIX
    } else {
        error("Branch not detected. branch=${branch}")
    }
}